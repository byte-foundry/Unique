type Choice @model {
  createdAt: DateTime!
  id: ID! @isUnique
  name: String!
  step: Step @relation(name: "ChoiceOnStep")
  updatedAt: DateTime!
  selected: Int @defaultValue(value: 0)
  values: Json!
}

type File @model {
  contentType: String!
  createdAt: DateTime!
  id: ID! @isUnique
  name: String!
  secret: String! @isUnique
  size: Int!
  updatedAt: DateTime!
  url: String! @isUnique
}

type Preset @model {
  createdAt: DateTime!
  exported: Int @defaultValue(value: 0)
  id: ID! @isUnique
  selected: Int @defaultValue(value: 0)
  steps: [Step!]! @relation(name: "PresetOnStep")
  template: String!
  updatedAt: DateTime!
  preset: String!
  variant: String!
  baseValues: Json!
  needs: [String!]!
  projects: [Project!]! @relation(name: "ProjectOnPreset")
  ptypoPresetId: String @isUnique
}

type Step @model {
  choices: [Choice!]! @relation(name: "ChoiceOnStep")
  createdAt: DateTime!
  id: ID! @isUnique
  name: String!
  preset: Preset @relation(name: "PresetOnStep")
  selected: Int @defaultValue(value: 0)
  updatedAt: DateTime!
  description: String!
}

type User @model {
  createdAt: DateTime! # read-only (managed by Graphcool)
  updatedAt: DateTime! # read-only (managed by Graphcool)
  id: ID! @isUnique # read-only
  email: String @isUnique
  projects: [Project!]! @relation(name: "UserOnProject")
}

type Project @model {
  bought: Boolean @defaultValue(value: false)
  choicesMade: Json!
  createdAt: DateTime!
  id: ID! @isUnique
  preset: Preset @relation(name: "ProjectOnPreset")
  updatedAt: DateTime!
  need: String
  user: User @relation(name: "UserOnProject")
  name: String @defaultValue(value: "Untitled")
  checkoutPackage: [String!] @defaultValue(value: [])
}


